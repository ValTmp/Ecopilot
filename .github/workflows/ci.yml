name: EcoPilot CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret
        JWT_REFRESH_SECRET: test-jwt-refresh-secret
    
    - name: Upload test coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage
        path: coverage/

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build Docker image
      run: |
        docker build -t ecopilot:${{ github.sha }} .
        docker save ecopilot:${{ github.sha }} > ecopilot-image.tar
    
    - name: Upload Docker image
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: ecopilot-image.tar

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download Docker image
      uses: actions/download-artifact@v3
      with:
        name: docker-image
    
    - name: Deploy to development
      run: |
        echo "Deploying to development server"
        # Add deployment script here
    
  deploy-prod:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download Docker image
      uses: actions/download-artifact@v3
      with:
        name: docker-image
    
    - name: Deploy to production
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          mkdir -p ~/deploy
          cd ~/deploy
          
          # Clean up old images
          docker system prune -f
          
          # Load new image
          docker load < ecopilot-image.tar
          
          # Deploy using docker-compose
          docker-compose -f docker-compose.prod.yml up -d
          
          # Verify deployment
          docker ps | grep ecopilot 